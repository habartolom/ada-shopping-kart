// <auto-generated />
using System;
using App.Web.Infrastructure.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Web.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Web.Models.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Items")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("App.Web.Models.Entities.OrderProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts", (string)null);
                });

            modelBuilder.Entity("App.Web.Models.Entities.PersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5eb7d209-020b-477c-9e01-db717874faf6"),
                            Address = "Calle 49 A Sur 87 J 29",
                            Name = "Harold Andrés Bartolo Moscoso",
                            Phone = "3028305818"
                        });
                });

            modelBuilder.Entity("App.Web.Models.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a5fa050-b0e2-4a7f-ba9a-73ccfe54aafc"),
                            Description = "Laptop",
                            Name = "PC Mallow TM97 AMD Ryzen 5 4600G Ram 8GB SSD 480GB",
                            Price = 1650000.0,
                            Stock = 1
                        },
                        new
                        {
                            Id = new Guid("c1248fe2-4920-4c0e-ba44-84a25fe903b4"),
                            Description = "Laptop",
                            Name = "PC Mallow TM92 AMD Ryzen 3 4100 GT 1030 2GB Ram 8GB M.2 256GB *Ob",
                            Price = 1599000.0,
                            Stock = 0
                        },
                        new
                        {
                            Id = new Guid("bec964c6-f87f-4507-8b96-dc79796c4684"),
                            Description = "Laptop",
                            Name = "PC Gamer Mallow TM96 AMD Ryzen 5 5600G Ram 16GB M.2 512GB",
                            Price = 1999000.0,
                            Stock = 11
                        },
                        new
                        {
                            Id = new Guid("12f1bd66-3703-44af-807f-ff52e9b36fb6"),
                            Description = "Laptop",
                            Name = "PC Gamer Violet TV40 Intel Core i3-13100F GTX 1650 4GB Ram 16GB M",
                            Price = 2899000.0,
                            Stock = 13
                        },
                        new
                        {
                            Id = new Guid("8c5a76e0-27ae-4cd4-9606-56e536e87439"),
                            Description = "Laptop",
                            Name = "PC Gamer Tauret Orchid TO70 AMD Ryzen 5 4600G GTX 1660 Ti 6GB Ram",
                            Price = 3499000.0,
                            Stock = 15
                        },
                        new
                        {
                            Id = new Guid("037925a1-f210-41bf-9239-bf82f6a5006f"),
                            Description = "Laptop",
                            Name = "PC Gamer Tauret Orchid TO66 Intel Core i5-12400 GTX 1660 6GB Ram",
                            Price = 3799000.0,
                            Stock = 14
                        },
                        new
                        {
                            Id = new Guid("a070c89d-269a-4119-b627-ed8c1100d8fe"),
                            Description = "Laptop",
                            Name = "PC Gamer Tauret Amethyst TA73 Intel core 13400F RTX 3060 Ti 8GB R",
                            Price = 3899000.0,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("c44c0074-6782-493b-9f84-7fe02c228a6a"),
                            Description = "Laptop",
                            Name = "PC Gamer Tauret Amethyst TA70 Alto Rendimiento AMD Ryzen 7 5700X",
                            Price = 5150000.0,
                            Stock = 13
                        },
                        new
                        {
                            Id = new Guid("3ec38686-7b38-40f4-9f63-d59e51454346"),
                            Description = "Laptop",
                            Name = "PC Gamer Tauret Orchid TO72 AMD Ryzen 5 5600X RTX 3050 8GB Ram 16",
                            Price = 5799000.0,
                            Stock = 21
                        },
                        new
                        {
                            Id = new Guid("a98bb094-fd89-4cb4-b05a-0e5621d0a1e3"),
                            Description = "Laptop",
                            Name = "PC Gamer Tauret Amethyst TA53 AMD Ryzen 7 5800X3D RTX 3060 12GB R",
                            Price = 6599000.0,
                            Stock = 8
                        },
                        new
                        {
                            Id = new Guid("ce0ca811-060b-4e3a-ab54-99d041b5f8f3"),
                            Description = "Laptop",
                            Name = "PC Gamer Tauret Amethyst TA66 intel Core i5-13400F RTX 3070 8GB R",
                            Price = 6799000.0,
                            Stock = 4
                        },
                        new
                        {
                            Id = new Guid("e3b08ce6-6218-4e48-b8c9-7d34f520afad"),
                            Description = "Laptop",
                            Name = "PC Gamer Tauret Amethyst TA71 AMD Ryzen 7 5800X3D RTX 4070 12GB R",
                            Price = 7999000.0,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("1af522da-29c3-4da5-9933-4debbafdbcbb"),
                            Description = "Laptop",
                            Name = "PC Gamer Tauret Amethyst TA75 AMD Ryzen 5 7600X RTX 4060 Ti 8GB R",
                            Price = 7999000.0,
                            Stock = 5
                        },
                        new
                        {
                            Id = new Guid("fda342cc-dc03-4995-9fa4-e436ead8b59f"),
                            Description = "Laptop",
                            Name = "PC Gamer Tauret Amethyst TA76 AMD Ryzen 7 7700X RTX 4070 Ti 12GB",
                            Price = 9799000.0,
                            Stock = 5
                        });
                });

            modelBuilder.Entity("App.Web.Models.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec8367a7-e178-41c5-a2a4-882545e026ec"),
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("a013c111-a455-4b0f-8adf-e40c04922abb"),
                            Name = "Regular"
                        });
                });

            modelBuilder.Entity("App.Web.Models.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c95ee721-efdd-4e25-b969-45a9f6235e45"),
                            IsActive = true,
                            PasswordHash = "omXELhhijwpUNqzdst2HTtuY8oplkmgyRi7o45Ptrjc=",
                            PasswordSalt = "aL5obEwZGtIprvlpvLA6BQ==",
                            PersonId = new Guid("5eb7d209-020b-477c-9e01-db717874faf6"),
                            RoleId = new Guid("ec8367a7-e178-41c5-a2a4-882545e026ec"),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("App.Web.Models.Entities.OrderEntity", b =>
                {
                    b.HasOne("App.Web.Models.Entities.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Persons");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Web.Models.Entities.OrderProductEntity", b =>
                {
                    b.HasOne("App.Web.Models.Entities.OrderEntity", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderProducts_Orders");

                    b.HasOne("App.Web.Models.Entities.ProductEntity", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderProducts_Products");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Web.Models.Entities.UserEntity", b =>
                {
                    b.HasOne("App.Web.Models.Entities.PersonEntity", "Person")
                        .WithOne("User")
                        .HasForeignKey("App.Web.Models.Entities.UserEntity", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Web.Models.Entities.RoleEntity", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("App.Web.Models.Entities.OrderEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("App.Web.Models.Entities.PersonEntity", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("App.Web.Models.Entities.ProductEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("App.Web.Models.Entities.RoleEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Web.Models.Entities.UserEntity", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
